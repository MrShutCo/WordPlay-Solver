@inject HttpClient Http
@using WordPlaySolver

@page "/"

<MudGrid>
    @* Words *@
    <MudItem xs="12">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudText Typo="Typo.h3">Word Play Point Scorer</MudText>
        </MudPaper>
    </MudItem>
    
    @* Modifiers *@
    <MudItem xs="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudStack>
                @for (int i = 0; i < _mods.Length; i++)
                {
                    int ii = i;
                        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                            <MudNumericField Style="width: 50px;" Label="Bonus" Variant="Variant.Text" Min="0.0" Max="1000.0"/>
                            <MudSelect Style="width: 40px;"  @bind-Value="_mods[ii].ModType">
                                @foreach (var modtype in Enum.GetValues(typeof(ModType)).Cast<ModType>())
                                {
                                    <MudSelectItem Value="modtype">@modtype</MudSelectItem>
                                }
                            </MudSelect>
                            <MudSelect @bind-Value="_mods[ii].Name">
                                @foreach (var option in ModifierConditions)
                                {
                                    <MudSelectItem Value="option.Key">@option.Key</MudSelectItem>
                                }
                            </MudSelect>
                        </MudPaper>
                }
            </MudStack>
        </MudPaper>
    </MudItem>

    @* Word box *@
    <MudItem xs="6">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
            <MudGrid>
                @for (int i = 0; i < 16; i++)
                {
                    var i1 = i;
                    <MudItem xs="3">
                        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8">
                            <MudTextField @bind-Value="_possibleLetters[i1]"
                                      MaxLength="1"
                                      Immediate="true"
                                      @ref="@_letterRefs[i1]"
                                      @onkeydown="@((e) => OnKeyDown(e, i1))"
                                      Style="width: 40px;text-align: center;"/>
                        </MudPaper>
                    </MudItem>
                }
            </MudGrid>
        </MudPaper>
        @* <MudTextField Label="Standard" Variant="Variant.Text"></MudTextField> *@
        <MudButton OnClick="CalculateWords" Variant="Variant.Filled" Color="Color.Primary">Submit</MudButton>
        <MudItem xs="12">
            <MudPaper>
                <MudList T="string">
                    @foreach (var result in topResults)
                    {
                        <MudListItem Text="@result.hand.GetResult(result.value)"/>
                    }
                </MudList>
            </MudPaper>
        </MudItem>
    </MudItem>

    @* Settings *@
    <MudItem xs="3">
        <MudStack Style="width: 300px">
            <MudNumericField @bind-Value="searchParameters.BestNResults" Label="Number of Results" Variant="Variant.Text" Min="1" Max="10" />
            <MudNumericField @bind-Value="searchParameters.MinLength" Label="Min Word Length" Variant="Variant.Text" Min="1" Max="@searchParameters.MaxLength" />
            <MudNumericField @bind-Value="searchParameters.MaxLength" Label="Max Word Length" Variant="Variant.Text" Min="@searchParameters.MinLength" Max="16" />
            <MudNumericField @bind-Value="searchParameters.MaxWordScore" Label="Max Score" Variant="Variant.Text" Min="0" Max="65536" />
            <MudTextField @bind-Value="searchParameters.Contains" Label="Word Contains" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="searchParameters.Prefix" Label="Word Prefix" Variant="Variant.Text"></MudTextField>
            <MudTextField @bind-Value="searchParameters.Suffix" Label="Word Suffix" Variant="Variant.Text"></MudTextField>
        </MudStack>
    </MudItem>
    
   
</MudGrid>

@code {
    private readonly MudTextField<string>[] _letterRefs = new MudTextField<string>[16];
    private readonly ModifierDef[] _mods = new ModifierDef[6];
    
    string[] _possibleLetters = new string[16];

    Scorer scorer;
    Tree tree;
    State state;
    Random random;

    SearchParameters searchParameters = new()
    {
        BestNResults = 5,
        MinLength = 4,
        MaxLength = 16,
        Prefix = "",
        Suffix = "",
        Contains = "",
        MaxWordScore = null
        
    };
    
    List<(Hand hand, double value)> topResults = [];

    protected override void OnInitialized()
    {
        random = new Random();
        
        _possibleLetters = new string[16];
        for (int i = 0; i < 16; i++)
        {
            _possibleLetters[i] = "";
        }

        for (int i = 0; i < 6; i++)
        {
            _mods[i] = new ModifierDef();
        }

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var fileContent = await Http.GetStringAsync("wordsfull.txt"); 
            scorer = new Scorer(16);
            scorer.LoadWords(fileContent, 16);
            tree = new Tree(scorer.Words, scorer);
        }
    }
    
    private async Task OnKeyDown(KeyboardEventArgs e, int index)
    {
        if (e.Key == "Backspace")
        {
            _possibleLetters[index] = ""; // clear current
            if (index > 0)
            {
                await _letterRefs[index - 1].FocusAsync();
            }
        }
        else if (e.Key.Length == 1 && char.IsLetter(e.Key[0]))
        {
            _possibleLetters[index] = e.Key.ToUpperInvariant();

            // Defer the focus to next textbox slightly, so Blazor finishes rendering first
            if (index < _letterRefs.Length - 1)
            {
                await Task.Yield(); // let Blazor process current update
                await _letterRefs[index + 1].FocusAsync();
            }
        }
    }

    void CalculateWords()
    {
        state = new State(_possibleLetters.Where(l => !string.IsNullOrEmpty(l)).Select(p => p[0]).ToArray());
        state.DrawHand(random, 16);
        topResults = state.FindBestWordsInHand(tree, scorer, searchParameters).ToList();
        foreach (var result in topResults)
        {
            Console.WriteLine(result.hand.GetWord());
        }
    }

    Dictionary<string, Func<Hand, List<Tile>, bool>> ModifierConditions = new()
    {
        { "Always true", (h, t) => true },
        { "First letter = last", (h, t) =>
        {
            var word = h.GetWord();
            return word.First() == word.Last();
        }},
        { "First last vowels", (h, t) =>
        {
            var word = h.GetWord();
            return Scorer.IsVowel(word.First()) && Scorer.IsVowel(word.Last());
        }}
    };

    List<Modifier> modifiers = new List<Modifier>()
    {
    };

    public enum ModType
    {
        Add,
        Mult
    }

    class ModifierDef
    {
        public string Name { get; set; }
        public double Bonus { get; set; }
        public ModType ModType { get; set; }
        
    }
}

